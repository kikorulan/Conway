/*=============================================================================

  RUNGRIDRT: Run the ray tracing method over a grid

  Copyright (C) 2017 Kiko RulÂ·lan, Marta M. Betcke

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.

  See LICENSE.txt in the top level directory for details.

=============================================================================*/

#include <gridRT.h>
#include <mpBasicTypes.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cmath>
#include <vector>
#include <limits>
#include <memory>

#include <armadillo>

using namespace std;
using namespace arma;
using namespace RayTracing;


typedef std::unique_ptr<GridRT> GridRT_p;


int main(int argc, char* argv[])
{
/*=======================================================================
===================   CHECK USAGE AND INPUT FILES     =================== 
=========================================================================*/
    // Tell the user how to run the program
    if (argc != 4) {
        cerr << "USAGE: " << argv[0] << " input_file_dimensions input_file_sound_speed input_file_sources " << endl;
        cerr << endl;
        cerr << "    INPUT_FILE_DIMENSIONS format:" << endl;
        cerr << "        Nx Ny" << endl;
        cerr << "        dx dy" << endl;
        cerr << endl;
        cerr << "    INPUT_FILE_SOUND_SPEED format:" << endl;
        cerr << "        c_{1,1}  ... c_{1,Ny}" << endl;
        cerr << "           ...   ...  ... " << endl;
        cerr << "        c_(Nx,1} ... c_{Nx,Ny1}" << endl;
        cerr << "    where c is the matrix that defines the sound speed in the domain." << endl;
        cerr << endl;
        cerr << "    INPUT_FILE_SOURCES format:" << endl;
        cerr << "    N lines, each corresponding to a source." << endl;
        cerr << "    Each line contains 7 parameters as follows:" << endl;
        cerr << "        xCoord yCoord nRays angleMin angleMax step tauMax" << endl;
        cerr << endl;
        return 1;
    }

/*=======================================================================
===================   DEFINE GRID AND SOURCES         =================== 
=========================================================================*/
    std::string dimensionsFile;
    dimensionsFile = argv[1];
    GridRT_p grid(new GridRT(dimensionsFile));

    std::string cFile;
    cFile = argv[2];
    grid->loadC(cFile);

    std::string sourcesFile;
    sourcesFile = argv[3];
    grid->loadSources(sourcesFile);

    for (int i = 0; i < grid->getNSources(); i++)
        grid->computeSource(i);

/*=======================================================================
===================   WRITE OUTPUT                    =================== 
=========================================================================*/    
    grid->writeTrajectories();
    grid->writeDimensions();
    
    return 0;
}
